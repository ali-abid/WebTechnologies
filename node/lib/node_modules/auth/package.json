{
  "name": "auth",
  "version": "0.0.9",
  "description": "ERROR: No README.md file found!",
  "main": "./lib/index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/crcn/node-auth.git"
  },
  "author": "",
  "license": "BSD",
  "dependencies": {
    "outcome": "0.0.x",
    "step": "0.0.x",
    "structr": "0.2.x",
    "underscore": "1.4.x",
    "dsync": "0.0.x",
    "vine": "0.1.x",
    "dustjs-linkedin": "1.1.x",
    "seq": "0.3.x",
    "comerr": "0.0.x",
    "verify": "0.0.x"
  },
  "browserify": "./browser/index.js",
  "devDependencies": {
    "plugin": "*",
    "plugin-express": "0.0.x",
    "plugin-mongodb": "0.0.x"
  },
  "readme": "\n\n## Features\n\n- share items with multiple users\n- creating account tokens with access to specific collections & items\n\t- used for locking down public access to certain features.\n\t- ability to add expiration for tokens\n- \n\n```javascript\n\nvar mongoose = require(\"mongoose\"),\nstep         = require(\"step\"),\nSchema       = mongoose.Schema,\nObjectId     = Schema.Types.ObjectId;\n\n\nvar auth = require(\"auth\").connect({\n\tconnection: mongoose.createConnection(\"mongodb://localhost/auth-test\")\n});\n\nvar Post = new Schema({\n\tmessage: String\n});\n\t\n//make the post ownable\nPost.plugin(auth.ownable);\n\nstep(\n\tfunction() {\n\t\tauth.signup({ email: \"me@email.com\", password: \"password\" }, this);\n\t},\n\tfunction(err, account) {\n\t\tthis.account = account;\n\t\tvar post = new Post({\n\t\t\tmessage: \"Hello World!\"\n\t\t});\n\n\t\t//make the account OWN the post\n\t\taccount.own(post);\n\n\t\tpost.save(this);\n\t},\n\tfunction() {\n\t\tPost.find(this.account.ownQuery(), this);\n\t},\n\tfunction(err, post) {\n\t\tconsole.log(post.message); //Hello World!\n\t}\n);\n```\n\n\n## auth API\n\n### auth auth.connect(options)\n\t\n- options\n\t`connection` - mongodb connection\n\n### auth.Account.signup(account, onCreated)\n\ncreates a new user\n\n### auth.Account.login(credentals, onLogin)\n\nLogs the user in with u/p, or a token\n\nExample:\n\n```javascript\nauth.Account.login({ token: tokenKey }, onLogin);\nauth.Account.login({ email: \"email\", password: \"password\" }, onLogin);\n```\n\n## Account API\n\n### account.getMainToken(callback)\n\nreturns the main access token with super privileges. No restrictions to collections & items.\n\n```javascript\nuser.getMainToken(function(null, token) {\n\tconsole.log(token.key); //key used to login\n\tconsole.log(token.ttl); // -1 = no expiration date.\n\tconsole.log(token.scope); //[ { collectionName: null, item: null, access: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"SUPER\"]}]\n})\n```\n\n### account.createToken(options, callback)\n\n- `options` - options for the token\n\t- `item` - the item to grant access to (optional)\n\t- `collectionName` - the collection \n\t- `ttl` - time in MS for expiration \n\t- `access` - (array) scope access. default is `access.all()`\n\n```javascript\n\n//only give access to the posts collection, and only allow reading items\nuser.createToken({ item: Posts.collection.name, access: [access.POST] }, function(err, token) {\n\tconsole.log(token.scope); //[ { collectionName: \"posts\", item: null, access: [\"GET\"]}]\n});\n```\n\n### account.ownItem(item)\n\nmakes the account an owner of an item with SUPER privileges on item\n\n```javascript\nvar p = new Post({ message: \"hello!\" });\nuser.ownItem(p);\np.save();\n```\n\n### account.shareItem(item, access)\n\nShares an item with another user\n\n- `item` - item to own\n- `access` - access level for the given item. Blank = ALL privileges.\n\n```javascript\nvar access = require(\"auth\").access;\nPost.findOne({message:\"hello!\"}, function(err, post) {\n\tuser2.shareItem(post, [access.GET]); //ability to only see item\n\tpost.save();\n});\n```\n\n### account.authorized(item, access)\n\nreturns TRUE if the account has access to the item. Note that the result can be variable\ndepending if whether the given user logs in with a restricted login token. See below.\n\n```javascript\n\n//logged \nuser2.authorized(post); //TRUE\nuser2.authorized(post, [access.POST]); //FALSE\nuser2.authorized(post, [access.GET]); //TRUE\nuser2.authorized(post, [access.GET, access.POST]); //TRUE\n\n\n//login with the post owner, but restrict access with the created\n//token above.\nUser.login({ token: aboveTokenKey }, function(err, user) {\n\tuser.authorized(post, [access.TRUE]); //FALSE\n\tuser.authorized(post, [access.POST]); //FALSE\n})\n```\n\n### Error account.unauthorized(callback)\n\nTiny flow-control utility.\n\n### account.addToSearch(query)\n\nadds account to the given search. For example:\n\n```javascript\n\nPost.findOne(user.addToSearch(), function(err, post) {\n\tuser.authorized(post); //TRUE\n})\n\n## TODO\n\n- make sub-schemas ownable\n- sharing whole collections (job & timer)\n- custom authentication schema\n- validation of credentials (email/pass)\n- Auth.lockdown - prevent models from being saved or serialized if unauthorized\n- hooks with [passport](https://github.com/jaredhanson/passport)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/crcn/node-auth/issues"
  },
  "_id": "auth@0.0.9",
  "dist": {
    "shasum": "ca2c7002389a90ada235cef4e3b39f00cddec52b"
  },
  "_from": "auth@",
  "_resolved": "https://registry.npmjs.org/auth/-/auth-0.0.9.tgz"
}
